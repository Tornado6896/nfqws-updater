#!/bin/sh

#Переменные
RoutID="$(echo $(hostname) | tr '[:lower:]' '[:upper:]')"
Ver="$(opkg info nfqws-keenetic | grep "Version:")"
Ver2="$(curl -ss https://anonym-tsk.github.io/nfqws-keenetic/all/Packages | grep  -m1 -w -e "nfqws-keenetic-web"  -e "Version")"
urlList="https://raw.githubusercontent.com/Tornado6896/nfqws-updater/refs/heads/main/user.lst"
confDirNfqws="/opt/etc/nfqws"
listLocal="$confDirNfqws/user.list"
RoutID="$(echo $(hostname) | tr '[:lower:]' '[:upper:]')"
green="\033[32m"
red="\033[31m"
yellow="\033[33m"
reset="\033[0m" 

# Функции
function sendTelegram {
  local tgUrl="https://api.telegram.org/bot$tgToken/sendMessage"
  local tgTimeout="10"
  local tgText="$@"
  local tgCmdArgs="parse_mode=HTML&chat_id=$tgChatId&disable_web_page_preview=1&text=$tgText"
  tgCmd=$(curl --max-time $tgTimeout -d "$tgCmdArgs" $tgUrl -s)
  if [ $? -gt 0 ]; then echo "Ошибка оправки в Telegram"; else echo "Сообщение успешно отправлено в Telegram!"; fi

}
function sendupdatenfqws {
VerWeb2="$(opkg info nfqws-keenetic-web | grep "Version")"
Ver3="$(opkg info nfqws-keenetic | grep "Version:")"
 echo -e "${green}$RoutID${reset}: Служба ${green}nfqws${reset} обновлена $Ver3. Служба ${green}nfqws-web${reset} обновлена $VerWeb2";
     if [ -n "$tgToken" -a -n "$tgChatId" ]; then
      sendTelegram "$RoutID: Служба nfqws обновлена $Ver3. Служба nfqws-web обновлена $VerWeb2";
	  restartnfqws
	  fi
	  }
function sendinstallnfqws {
VerWeb2="$(opkg info nfqws-keenetic-web | grep "Version")"
Ver3="$(opkg info nfqws-keenetic | grep "Version:")"
 echo -e "${green}$RoutID${reset}: Служба ${green}nfqws${reset} установлена $Ver3. Служба ${green}nfqws-web${reset} установлена $VerWeb2";
     if [ -n "$tgToken" -a -n "$tgChatId" ]; then
      sendTelegram "$RoutID: Служба nfqws установлена $Ver3. Служба nfqws-web установлена $VerWeb2";
	  restartnfqws
	  fi
	  }
function sendupdatenfqwsno {
echo -e "${red}$RoutID${reset}: Обновлений ${red}nfqws${reset} нет";
	 if [ -n "$tgToken" -a -n "$tgChatId" ]; then
	sendTelegram "$RoutID: Обновлений nfqws нет";
  fi
}
function sendupdateuserlist {
echo -e "${red}$RoutID${reset}: userlist успешно добавлен, новых записей $count3";
	  if [ -n "$tgToken" -a -n "$tgChatId" ]; then
	  sendTelegram "$RoutID: userlist успешно добавлен, добавлено новых записей $count3";
	  fi
}
function sendupdateuserlistno {
 echo -e "${red}$RoutID${reset}:Обновления ${red}userlist${reset} отсутствуют";
	if [ -n "$tgToken" -a -n "$tgChatId" ]; then
	sendTelegram "$RoutID: Обновления userlist отсутствуют";
	fi
}
function restartnfqws {
echo -e "Переагрузка ${green}nfqws${reset}"
/opt/etc/init.d/S51nfqws restart
echo -e "${yellow}$RoutID${reset}: Служба ${yellow}nfqws${reset} перезапущена";
if [ -n "$tgToken" -a -n "$tgChatId" ]; then
	sendTelegram "$RoutID: Служба nfqws перезапущена";
	fi
}
function restartcron {
echo -e "Переагрузка ${green}cron${reset}"
/opt/etc/init.d/S05crond restart;
echo -e "${yellow}$RoutID${reset}: Служба ${yellow}cron${reset} перезапущена";
if [ -n "$tgToken" -a -n "$tgChatId" ]; then
sendTelegram "$RoutID: Служба cron перезапущена";
fi
}
function removenfqws {
echo -e "Удаление ${green}nfqws${reset}"
opkg remove --autoremove nfqws-keenetic-web nfqws-keenetic
rm -r /opt/var/spool/cron/crontabs
rm -r /opt/usr/bin/nfqws_var
deldns
delpolicy
}
function token {
echo -e "Настройка отправки уведомлений в ${green}Telegram${reset}"
echo Укажите Ваш tgToken:
read tgToken
echo -e "Ваш токен: $tgToken"
echo Укажите Ваш tgChatId:
read tgChatId
echo -e "Ваш чат: $tgChatId"
initd_file="/opt/usr/bin/nfqws_var"
script_content='#!/bin/sh 
tgToken="'${tgToken}'"
tgChatId="'${tgChatId}'"
'
        echo -e "Файл ${green}nfqws_var${reset} создан"		
        echo -e "${script_content}" > "${initd_file}" 
        chmod +x "${initd_file}"
		source "/opt/usr/bin/nfqws_var"
}
function updatenfqws {
echo -e "Обновление ${green}nfqws${reset}"
echo -e "Файл ${green}nfqws_var${reset} создан"	
if  [ "$Ver" != "$Ver2" ]; then
opkg update
opkg upgrade nfqws-keenetic
opkg upgrade nfqws-keenetic-web

      sendupdatenfqws
else
	sendupdatenfqwsno
  fi
}
function menu {
            echo
            echo -e "     Главное меню ${green}nfqws-updater v1.0.3${reset}"
            echo
            echo -e "     Выберите пункт:"
            echo -e "     1.  Выполнить полную установку ${green}nfqws${reset}"
			echo -e "     2.  Выполнить установку ${green}nfqws${reset}"
			echo -e "     3.  Выполниить обновление ${green}nfqws${reset}"
			echo -e "     4.  Перезагрузить ${green}nfqws${reset}"
			echo -e "     5.  Добавить ${green}DNS записи${reset}"
			echo -e "     6.  Добавить ${green}политику nfqws${reset}"
			echo -e "     7.  Удалить ${green}nfqws${reset}"
			echo -e "     8.  Удалить ${green}DNS записи${reset}"
			echo -e "     9.  Удалить ${green}политику nfqws${reset}"
			echo -e "     10. Перезагрузить ${green}cron${reset}"
			echo -e "     11. Выполниить обновление ${green}userlist${reset}"
			echo -e "     12. Выбрать время обновлений ${green}nfqws и userlist${reset}"
            echo -e "     13. Изменить данные ${green}telegram${reset}"
            echo -e "     0.  Выход"
            echo -e 

            local choice
            while true; do
                read -p "  Ваш выбор: " choice
                if [[ "$choice" =~ ^[0-9]$ || ^[0-9]+.*[0-9]$ ]]; then
                    break
                else
                    echo -e "  Некорректный номер действия. Пожалуйста,выберите снова"
                fi
            done

            if [ "$choice" -eq 1 ]; then  
            installfull
            menu			
			fi			
            if [ "$choice" -eq 2 ]; then         
            installnfqws
			menu
			fi
			if [ "$choice" -eq 3 ]; then         
            updatenfqws
            menu			
			fi
			if [ "$choice" -eq 4 ]; then            
            restartnfqws
			menu
			fi
			if [ "$choice" -eq 5 ]; then            
            dnsadd
			menu
			fi
			if [ "$choice" -eq 6 ]; then
			addpolicy
			menu	
            fi	
			if [ "$choice" -eq 7 ]; then
			removenfqws
			menu	
            fi	
			if [ "$choice" -eq 8 ]; then
			deldns
			menu	
            fi
			if [ "$choice" -eq 9 ]; then
			delpolicy
			menu
			fi
			if [ "$choice" -eq 10 ]; then
			restartcron
			menu
			fi
		    if [ "$choice" -eq 11 ]; then
			userlist
			menu
			fi
			if [ "$choice" -eq 12 ]; then
			crontime
			menu
			fi
			if [ "$choice" -eq 13 ]; then
			token
			menu
			fi
			if [ "$choice" -eq 0 ]; then
			exit 0
				
fi

}
function crontime {
       
		local init_back="/opt/backups/"
        local initd_crontab="/opt/var/spool/cron/crontabs/root"
echo -e "Установка автоматического обновления ${green}nfqws и userlist${reset}"

		
        
            echo
            echo "     Выберите день"
            echo "     0. Отмена"
            echo "     1. Понедельник"
            echo "     2. Вторник"
            echo "     3. Среда"
            echo "     4. Четверг"
            echo "     5. Пятница"
            echo "     6. Суббота"
            echo "     7. Воскресенье"
            echo "     8. Ежедневно"
            echo

            local day_choice
            while true; do
                read -p "  Ваш выбор: " day_choice
                if [[ "$day_choice" =~ ^[0-8]$ ]]; then
                    break
                else
                    echo -e "  ${red}Некорректный номер действия.${reset} Пожалуйста, выберите снова"
                fi
            done

            if [ "$day_choice" -eq 0 ]; then
                echo -e "  Время автоматического обновления не выбрано."
            else
                if [ "$day_choice" -eq 8 ]; then
                    echo
                    read -p "  Выберите час (0-23): " hour
                    while [[ ! "$hour" =~ ^[0-9]+$ || "$hour" -lt 0 || "$hour" -gt 23 ]]; do
                        echo -e "  ${red}Некорректный час.${reset} Пожалуйста, попробуйте снова"
                        read -p "  Введите значение от 0 до 23: " hour
                    done

                    read -p "  Выберите минуту (0-59): " minute
                    while [[ ! "$minute" =~ ^[0-9]+$ || "$minute" -lt 0 || "$minute" -gt 59 ]]; do
                        echo -e "  ${red}Некорректные минуты.${reset} Пожалуйста, попробуйте снова"
                        read -p "  Введите значение от 0 до 59: " minute
                    done

                    cron_expression="$minute $hour * * *"
                    cron_display="$minute $hour * * *"
                else
                    echo
                    read -p "  Выберите час (0-23): " hour
                    while [[ ! "$hour" =~ ^[0-9]+$ || "$hour" -lt 0 || "$hour" -gt 23 ]]; do
                        echo -e "  ${red}Некорректный час.${reset} Пожалуйста, попробуйте снова"
                        read -p "  Введите значение от 0 до 23: " hour
                    done

                    read -p "  Выберите минуту (0-59): " minute
                    while [[ ! "$minute" =~ ^[0-9]+$ || "$minute" -lt 0 || "$minute" -gt 59 ]]; do
                        echo -e "  ${red}Некорректные минуты.${reset} Пожалуйста, попробуйте снова"
                        read -p "  Введите значение от 0 до 59: " minute
                    done

                    case "$day_choice" in
                        1) day_of_week="1" ;;
                        2) day_of_week="2" ;;
                        3) day_of_week="3" ;;
                        4) day_of_week="4" ;;
                        5) day_of_week="5" ;;
                        6) day_of_week="6" ;;
                        7) day_of_week="0" ;;
                    esac

                    cron_expression="$minute $hour * * $day_of_week"
                    cron_display="$minute $hour * * $day_of_week"
                fi

                formatted_hour=$(printf "%02d" "$hour")
                formatted_minute=$(printf "%02d" "$minute")

                day_name=""
                case "$day_choice" in
                    0) day_name="Отмена" ;;
                    1) day_name="Понедельник" ;;
                    2) day_name="Вторник" ;;
                    3) day_name="Среда" ;;
                    4) day_name="Четверг" ;;
                    5) day_name="Пятница" ;;
                    6) day_name="Суббота" ;;
                    7) day_name="Воскресенье" ;;
                    8) day_name="Ежедневно" ;;
                esac
                
				if [ -s "$initd_crontab" ]; then
			   cron_file=""
			   local cron_file
               echo -e "Файл ${yellow}Cron${reset} существует сделать резервную копию?"
               echo -e "     1. Да"
               echo -e "     0. Нет"
			   
				
             while true; do
                read -p "  Ваш выбор: " cron_file
				
                if [[ "$cron_file" =~ ^[0-1]$ ]]; then
                    break
                else
                    echo -e "${red}Некорректный номер действия.${reset} Пожалуйста, выберите снова"
					fi
            done
			if [ "$cron_file" -eq 1 ]; then  
				mkdir -p "$init_back"
                cp -a "$initd_crontab" "$init_back"
				echo -e "Резервная копия ${green}cron${reset} создана по пути ${green}$init_back${reset}"
                sed -i "/nfqws_updater/d" /opt/var/spool/cron/crontabs/root
				echo -e "${cron_expression} nfqws_updater -update-userlist" >> "${initd_crontab}" 
				echo -e "${cron_expression} nfqws_updater -update-nfqws" >> "${initd_crontab}" 
				echo -e "${yellow}$RoutID${reset}: Время автоматического обновления ${yellow} nfqws и userlist${reset}: $day_name $formatted_hour:$formatted_minute";
				sendTelegram "$RoutID: Время автоматического обновления nfqws и userlist: $day_name $formatted_hour:$formatted_minute";
				restartcron
				fi
		        if [ "$cron_file" -eq 0 ]; then 
				sed -i "/nfqws_updater/d" /opt/var/spool/cron/crontabs/root
		        echo -e "${cron_expression} nfqws_updater -update-userlist" >> "${initd_crontab}" 
				echo -e "${cron_expression} nfqws_updater -update-nfqws" >> "${initd_crontab}" 
				echo -e "${yellow}$RoutID${reset}: Время автоматического обновления ${yellow} nfqws и userlist${reset}: $day_name $formatted_hour:$formatted_minute";
				sendTelegram "$RoutID: Время автоматического обновления nfqws и userlist: $day_name $formatted_hour:$formatted_minute";
				restartcron
				fi
				else
				sed -i "/nfqws_updater/d" /opt/var/spool/cron/crontabs/root
				echo -e "${cron_expression} nfqws_updater -update-userlist" >> "${initd_crontab}" 
				echo -e "${cron_expression} nfqws_updater -update-nfqws" >> "${initd_crontab}" 
				echo -e "${yellow}$RoutID${reset}: Время автоматического обновления ${yellow} nfqws и userlist${reset}: $day_name $formatted_hour:$formatted_minute";
				sendTelegram "$RoutID: Время автоматического обновления nfqws и userlist: $day_name $formatted_hour:$formatted_minute";
				restartcron
					fi
					
		
        
fi
}
function installnfqws {
echo -e "Установка ${green}nfqws${reset}"
opkg update
opkg install ca-certificates wget-ssl
opkg remove wget-nossl
mkdir -p /opt/etc/opkg
echo "src/gz nfqws-keenetic https://anonym-tsk.github.io/nfqws-keenetic/all" > /opt/etc/opkg/nfqws-keenetic.conf
opkg update
opkg install nfqws-keenetic
opkg install nfqws-keenetic-web
sendinstallnfqws
}
function userlist {
echo -e "Добавление ${green}userlist${reset}"
  local tsRemote=$(curl -sIkL --connect-timeout 5 "$urlList" | grep -i 'Content-Length' | tail -n 1 | sed 's|Content-Length: ||g')
  local tslocal=$(wc -c /opt/etc/nfqws/user.list | awk '{print $1}')
  if [ "$tslocal" -ne "$tsRemote" ]; then
    local count1="$(wc /opt/etc/nfqws/user.list | awk '{print $1}')"
    rm -f "$listLocal"
	curl --connect-timeout 10 -fkSL# "$urlList" > "$listLocal"
	   count2="$(wc /opt/etc/nfqws/user.list | awk '{print $1}')"
	   echo "$count2"
	   echo "$count1"
	   count3=$((count2 - count1))
    chown nobody:nobody "$listLocal"
    chmod 644 "$listLocal"
	sendupdateuserlist
	  else
    sendupdateuserlistno
  fi
  
}
function registercron {
    echo -e "Проверка наличия пакета ${green}cron${reset}"
	# Проверка наличия пакета cron
    if opkg list-installed | grep -q cron; then
        return
    fi

    # Определение переменных
    local initd_file="/opt/etc/init.d/S05crond"
    local s05crond_filename="${current_datetime}_S05crond"
    local required_script_version="0.4"

    # Проверка наличия файла S05crond
    if [ -e "${initd_file}" ]; then
        # Получение текущей версии скрипта
        local script_version=$(grep 'version=' "${initd_file}" | grep -o '[0-9.]\+')

        # Проверка версии скрипта
        if [ "${script_version}" != "${required_script_version}" ]; then
            # Определение пути для резервной копии
            local backup_path="/opt/etc/init.d/${s05crond_filename}"

            # Перемещение файла в каталог резервных копий с новым именем
            mv "${initd_file}" "${backup_path}"
            echo -e "Ваш файл «${green}S05crond${reset}» перемещен в каталог резервных копий «${yellow}${backup_path}${reset}»"
        fi
    fi

    # Содержимое скрипта
    local script_content='#!/bin/sh
### Начало информации о службе
# Краткое описание: Запуск / Остановка Cron
# version="0.4"  # Версия скрипта
### Конец информации о службе

green="\033[32m"
red="\033[31m"
yellow="\033[33m"
reset="\033[0m" 

cron_initd="/opt/sbin/crond"

# Функция для проверки статуса cron
cron_status() {
    if ps | grep -v grep | grep -q "$cron_initd"; then
        return 0 # Процесс существует и работает
    else
        return 1 # Процесс не существует
    fi
}

# Функция для запуска cron
start() {
    if cron_status; then
        echo -e "  Cron ${yellow}уже запущен${reset}"
    else
        $cron_initd -L /dev/null
        echo -e "  Cron ${green}запущен${reset}"
    fi
}

# Функция для остановки cron
stop() {
    if cron_status; then
        killall -9 "crond"
        echo -e "  Cron ${yellow}остановлен${reset}"
    else
        echo -e "  Cron ${red}не запущен${reset}"
    fi
}

# Функция для перезапуска cron
restart() {
    stop > /dev/null 2>&1
    start > /dev/null 2>&1
    echo -e "  Cron ${green}перезапущен${reset}"
}

# Обработка аргументов командной строки
case "$1" in
    start)
        start;;
    stop)
        stop;;
    restart)
        restart;;
    status)
        if cron_status; then
            echo -e "  Cron ${green}запущен${reset}"
        else
            echo -e "  Cron ${red}не запущен${reset}"
        fi;;
    *)
        echo -e "  Команды: ${green}start${reset} | ${red}stop${reset} | ${yellow}restart${reset} | status";;
esac

exit 0'
    
    # Создание или замена файла, если версия скрипта не соответствует требуемой версии 
    if [ "${script_version}" != "${required_script_version}" ]; then
        echo "Файл S05crond создан"	
        echo -e "${script_content}" > "${initd_file}" 
        chmod +x "${initd_file}" 
		
    fi 
}
function crontabs {
echo -e "Проверка наличия файла ${yellow}crontab${reset}"
local initd_crontab="/opt/var/spool/cron/crontabs/root"
if [ ! -e "${initd_crontab}" ]; then
echo -e "Файл ${red}crontab${reset} не найден"
mkdir -p /opt/var/spool/cron/crontabs
touch /opt/var/spool/cron/crontabs/root
chmod +x "${initd_crontab}"
echo -e "Файл ${green}crontab${reset} создан"	;
else
echo -e "Файл ${yellow}crontab${reset} уже существет";
fi
}
function addpolicy {
echo -e "Добавление политики ${green}nfqws${reset}"
ndmc -c ip policy Policy0 
ndmc -c ip policy Policy0 description nfqws
ndmc -c system configuration save
sleep 5s
echo -e "${green}$RoutID${reset}: политика ${green}nfqws${reset} добавлена";
if [ -n "$tgToken" -a -n "$tgChatId" ]; then
sendTelegram "$RoutID: политика nfqws добавлена";
fi
}
function delpolicy {
echo -e "Удаление политики ${green}nfqws${reset}"
ndmc -c ip no policy Policy0 
ndmc -c system configuration save
sleep 5s
echo -e "${green}$RoutID${reset}: политика ${green}nfqws${reset} удалена";
if [ -n "$tgToken" -a -n "$tgChatId" ]; then
sendTelegram "$RoutID: политика nfqws удалена";
fi
}
function dnsadd {
echo -e "Добавление ${green}DOT${reset}"
ndmc -c dns-proxy tls upstream 217.160.70.42 sni ns1.opennameserver.org
ndmc -c system configuration save
ndmc -c dns-proxy tls upstream 213.202.211.221 sni ns2.opennameserver.org
ndmc -c system configuration save
ndmc -c dns-proxy tls upstream 185.222.222.222 sni dot.sb
ndmc -c system configuration save
ndmc -c dns-proxy tls upstream 81.169.136.222 sni ns3.opennameserver.org
ndmc -c system configuration save
ndmc -c dns-proxy tls upstream 185.181.61.24 sni ns4.opennameserver.org
ndmc -c system configuration save
ndmc -c dns-proxy tls upstream 45.11.45.11 sni dot.sb
ndmc -c system configuration save
echo -e "Добавление ${green}DOT${reset}"
ndmc -c dns-proxy https upstream https://ns1.opennameserver.org/dns-query
ndmc -c system configuration save
ndmc -c dns-proxy https upstream https://ns2.opennameserver.org/dns-query
ndmc -c system configuration save
ndmc -c dns-proxy https upstream https://ns3.opennameserver.org/dns-query
ndmc -c system configuration save
ndmc -c dns-proxy https upstream https://doh.dns.sb/dns-query dnsm
ndmc -c system configuration save

echo -e "Игнорировать dns ${green}ip4${reset}"
ndmc -c interface ISP ip dhcp client no name-servers
ndmc -c system configuration save
ndmc -c interface PPTP0 ipcp no name-servers
ndmc -c system configuration save
ndmc -c  interface UsbQmi0 mobile no name-servers
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan4 ip dhcp client no name-servers
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan1 ip dhcp client no name-servers
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan2 ip dhcp client no name-servers
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan3 ip dhcp client no name-servers
ndmc -c system configuration save
echo -e "Игнорировать dns ${green}ip6${reset}"
ndmc -c interface ISP no ipv6 name-servers auto 
ndmc -c system configuration save
ndmc -c interface PPTP0 no ipv6 name-servers auto 
ndmc -c system configuration save
ndmc -c  interface UsbQmi0 no ipv6 name-servers auto
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan4 no ipv6 name-servers auto
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan1 no ipv6 name-servers auto
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan2 no ipv6 name-servers auto
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan3 no ipv6 name-servers auto
ndmc -c system configuration save

sleep 5s
echo -e "${green}$RoutID${reset}: ${green}DNS${reset} записи добавлены";
if [ -n "$tgToken" -a -n "$tgChatId" ]; then
sendTelegram "$RoutID: DNS записи добавлены";
fi
}
function deldns {

echo -e "Удаление ${green}DOH/DOT${reset}"
ndmc -c dns-proxy no tls upstream
ndmc -c dns-proxy no https upstream
ndmc -c system configuration save
echo -e "Возврат dns провайдера ${green}ip4${reset}"
ndmc -c interface ISP ip dhcp client name-servers
ndmc -c system configuration save
ndmc -c interface PPTP0 ipcp name-servers
ndmc -c system configuration save
ndmc -c  interface UsbQmi0 mobile name-servers
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan4 ip dhcp client name-servers
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan1 ip dhcp client name-servers
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan2 ip dhcp client name-servers
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan3 ip dhcp client name-servers
ndmc -c system configuration save
echo -e "Возврат dns провайдера ${green}ip6${reset}"
ndmc -c interface ISP ipv6 name-servers auto 
ndmc -c system configuration save
ndmc -c interface PPTP0 ipv6 name-servers auto 
ndmc -c system configuration save
ndmc -c  interface UsbQmi0 ipv6 name-servers auto
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan4 ipv6 name-servers auto
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan1 ipv6 name-servers auto
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan2 ipv6 name-servers auto
ndmc -c system configuration save
ndmc -c  interface GigabitEthernet0/Vlan3 ipv6 name-servers auto
ndmc -c system configuration save

sleep 5s
echo -e "${green}$RoutID${reset}: ${green}DNS${reset} записи удалены";
if [ -n "$tgToken" -a -n "$tgChatId" ]; then
sendTelegram "$RoutID: DNS записи удалены";
fi
}

function installfull {
token; 
installnfqws;
userlist;
rm -r /opt/root/_i.sh
registercron;
crontabs;
dnsadd;
addpolicy;
crontime;
echo -e "Доступные команды для ${green}nfqws_updater${reset} $1 \n${green}-menu${reset} - Главное меню
${green}-update-userlist${reset} - Обновление userlist
${green}-update-nfqws${reset} - Обновление nfqws
${green}-token${reset} - Настройка телеграма
${green}-restart-nfqws${reset} - Перезагрузка nfqws
${green}-remove-nfqws${reset} - Удаление nfqws
${green}-del-dns${reset} - Добавление DNS записей
${green}-del-dns${reset} - Удаление DNS записей
${green}-add-policy${reset} - Добавление политики nfqws
${green}-del-policy${reset} - Удаление политики nfqws
${green}-install-nfqws${reset} - Установка nfqws
${green}-restart-cron${reset} - Перезагрузка cron
${green}-install-nfqws-full${reset} - Полная установка nfqws
${green}-time-update${reset} - Установка даты и время проверки обновлений nfqws и userlist"
}
case "$1" in
    -menu)
    menu
	;;
	-update-nfqws)
    updatenfqws
	;;
	-update-userlist)
    userlist
	;;
	-token)
    token
	;;
	-remove-nfqws)
    removenfqws
	;;
	-restart-nfqws)
    restartnfqws
	;;
	-install-nfqws)
    installnfqws
	;;
	-install-nfqws-full)
    installfull
	;;
	-time-update)
    crontime
	;;
	-restart-cron)
    restartcron
	;;
	-del-dns)
    deldns
	;;
	-del-dns)
    dnsadd
	;;
	-add-policy)
    addpolicy
	;;
	-del-policy)
    delpolicy
	;;
	*)

echo -e "Доступные команды для ${green}nfqws_updater${reset} $1 \n${green}-menu${reset} - Главное меню
${green}-update-userlist${reset} - Обновление userlist
${green}-update-nfqws${reset} - Обновление nfqws
${green}-token${reset} - Настройка телеграма
${green}-restart-nfqws${reset} - Перезагрузка nfqws
${green}-remove-nfqws${reset} - Удаление nfqws
${green}-del-dns${reset} - Добавление DNS записей
${green}-del-dns${reset} - Удаление DNS записей
${green}-add-policy${reset} - Добавление политики nfqws
${green}-del-policy${reset} - Удаление политики nfqws
${green}-install-nfqws${reset} - Установка nfqws
${green}-restart-cron${reset} - Перезагрузка cron
${green}-install-nfqws-full${reset} - Полная установка nfqws
${green}-time-update${reset} - Установка даты и время проверки обновлений nfqws и userlist"
esac